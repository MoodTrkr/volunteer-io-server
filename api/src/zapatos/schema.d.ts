/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **usage_data_table**
   * - Table in database
   */
  export namespace usage_data_table {
    export type Table = 'usage_data_table';
    export interface Selectable {
      /**
      * **usage_data_table.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('usage_data_table_id_seq'::regclass)`
      */
      id: number;
      /**
      * **usage_data_table.id_user**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id_user: string;
      /**
      * **usage_data_table.ts**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      ts: Date;
      /**
      * **usage_data_table.usage_data**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      usage_data: string;
    }
    export interface JSONSelectable {
      /**
      * **usage_data_table.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('usage_data_table_id_seq'::regclass)`
      */
      id: number;
      /**
      * **usage_data_table.id_user**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id_user: string;
      /**
      * **usage_data_table.ts**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      ts: db.DateString;
      /**
      * **usage_data_table.usage_data**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      usage_data: string;
    }
    export interface Whereable {
      /**
      * **usage_data_table.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('usage_data_table_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **usage_data_table.id_user**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **usage_data_table.ts**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      ts?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **usage_data_table.usage_data**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      usage_data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **usage_data_table.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('usage_data_table_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **usage_data_table.id_user**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id_user: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **usage_data_table.ts**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      ts: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **usage_data_table.usage_data**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      usage_data: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **usage_data_table.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('usage_data_table_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **usage_data_table.id_user**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id_user?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **usage_data_table.ts**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      ts?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **usage_data_table.usage_data**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      usage_data?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'usage_data_table_id_user_ts_key' | 'usage_data_table_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = usage_data_table.Table;
  export type Selectable = usage_data_table.Selectable;
  export type JSONSelectable = usage_data_table.JSONSelectable;
  export type Whereable = usage_data_table.Whereable;
  export type Insertable = usage_data_table.Insertable;
  export type Updatable = usage_data_table.Updatable;
  export type UniqueIndex = usage_data_table.UniqueIndex;
  export type Column = usage_data_table.Column;
  export type AllBaseTables = [usage_data_table.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [usage_data_table.Table];


  export type SelectableForTable<T extends Table> = {
    usage_data_table: usage_data_table.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    usage_data_table: usage_data_table.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    usage_data_table: usage_data_table.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    usage_data_table: usage_data_table.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    usage_data_table: usage_data_table.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    usage_data_table: usage_data_table.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    usage_data_table: usage_data_table.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    usage_data_table: usage_data_table.SQL;
  }[T];

}
